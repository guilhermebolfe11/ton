name: Release

on:
  push:
    branches: [feat/ton-api]

concurrency:
  group: ${{github.event.repository.name}}

env:
  workspace: ${{vars.WORKSPACE}}
  TF_VAR_project_name: ${{vars.PROJECT_NAME}}
  TF_VAR_aws_region: ${{vars.AWS_REGION}}
  TF_VAR_api_domain: ${{vars.API_DOMAIN}}
  TF_VAR_bucket_states: ${{vars.BUCKET_STATES}}
  TF_VAR_counter_api_key: ${{secrets.COUNTER_API_KEY}}
  TF_VAR_counter_api_url: ${{vars.COUNTER_API_URL}}
  AWS_REGION: ${{vars.AWS_REGION}}
  AWS_ACCESS_KEY_ID: ${{secrets.AWS_ACCESS_KEY_ID}}
  AWS_SECRET_ACCESS_KEY: ${{secrets.AWS_SECRET_ACCESS_KEY}}

jobs:
  Lint:
    name: Run lint files
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout files
        uses: actions/checkout@v3

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile

      - name: Tests coverage
        run: pnpm lint

  Tests:
    name: Run tests
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: Lint
    steps:
      - name: Checkout files
        uses: actions/checkout@v3

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile

      - name: Tests coverage
        run: pnpm test:coverage

      - name: Report Coverage
        uses:  davelosert/vitest-coverage-report-action@v2

  Infra:
    name: Deploy infra
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: Tests
    steps:
      - name: Checkout files
        uses: actions/checkout@v3

      - name: Terraform setup
        uses: hashicorp/setup-terraform@v3

      - name: Terraform init
        working-directory: terraform
        run: terraform init -backend-config=config.s3.tfbackend

      - name: Terraform validate
        working-directory: terraform
        run: terraform validate

      - name: Terraform apply
        working-directory: terraform
        run: terraform apply -auto-approve

  MapFunc:
    name: Map lambdas functions
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: Infra
    outputs:
      lambdas: ${{ steps.getLambdas.outputs.lambdas }}
    steps:
      - name: Checkout files
        uses: actions/checkout@v3
      - name: Get lambdas
        id: getLambdas
        run: |
          cd src/infra/handlers
          lambdas=$(tree -d -L 1 -J | jq -j -c '.[0].contents | map(.name)')
          echo "lambdas=${lambdas}" >> $GITHUB_OUTPUT

  Build:
    name: Build code
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: MapFunc
    outputs:
      lambdas: ${{ needs.MapFunc.outputs.lambdas }}
    strategy:
      matrix:
        lambda: ${{ fromJSON(needs.MapFunc.outputs.lambdas) }}
    steps:
      - name: Checkout files
        uses: actions/checkout@v3

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile

      - name: Build ${{matrix.lambda}}
        run: pnpm esbuild src/infra/handlers/${{matrix.lambda}}/index.ts --bundle --minify --sourcemap --platform=node --target=es2020 --outfile=build/${{matrix.lambda}}/index.js

      - name: Zip build ${{matrix.lambda}}
        run: cd build/${{matrix.lambda}} && zip -r index.zip index.js*

      - name: Create artifact ${{matrix.lambda}}
        uses: actions/upload-artifact@v3
        with:
          name: ${{matrix.lambda}}
          path: ./build/${{matrix.lambda}
          retention-days: 1

  DeployCode:
    name: Deploy code
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: Build
    strategy:
      matrix:
        lambda: ${{ fromJSON(needs.Build.outputs.lambdas) }}
    steps:
      - name: Checkout files
        uses: actions/checkout@v3

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile

      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{matrix.lambda}}
          path: ./build/${{matrix.lambda}

      - name: Deploy code ${{matrix.lambda}}
        run: aws lambda update-function-code --function-name=${{matrix.lambda}} --zip-file=fileb://build/${{matrix.lambda}}/index.zip